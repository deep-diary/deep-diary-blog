(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{744:function(t,a,s){"use strict";s.r(a);var n=s(5),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("说明")]),t._v(" "),s("p",[t._v("一个 python project 中往往包含很多 .py 文件。python文件中又会包含很多函数，函数之间相互传参和调用。如果遇到代码行数很多的情况，我们阅读起来就会有困难。那么有什么办法可以解决这个困难呢？\n我们可以考虑采取可视化的方法将代码调用关系用图的方法表示出来。 pycallgraph是一种适用于python代码的动态调用分析工具。当然要想实现可视化还需要安装graphviz。graphviz 是一个图形可视化工具，可以将调用关系表示为图的形式。\n————————————————\n版权声明：本文为CSDN博主「臭皮匠-hfW」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/weixin_45080292/article/details/124896885")]),t._v(" "),s("p",[s("a",{attrs:{href:"www.deep-diary.com"}},[t._v("点击免费观看教学视频")])])]),t._v(" "),s("h1",{attrs:{id:"pycharm"}},[t._v("pycharm")]),t._v(" "),s("h2",{attrs:{id:"pycharm函数调用关系可视化"}},[t._v("pycharm函数调用关系可视化")]),t._v(" "),s("h3",{attrs:{id:"参考文件"}},[t._v("参考文件")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://blog.csdn.net/weixin_45080292/article/details/124896885",target:"_blank",rel:"noopener noreferrer"}},[t._v("pycharm函数调用关系可视化（Graphviz + pycallgraph画图）_臭皮匠-hfW的博客-CSDN博客_pycharm显示函数调用关系"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://blog.csdn.net/qq_36408085/article/details/82952846",target:"_blank",rel:"noopener noreferrer"}},[t._v("利用graphviz软件和pycallgraph库自动生成Python代码函数调用关系图_神奇小海螺的博客-CSDN博客"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"http://www.graphviz.org/docs/outputs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Output Formats | Graphviz"),s("OutboundLink")],1)])]),t._v(" "),s("h3",{attrs:{id:"问题清单"}},[t._v("问题清单")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://blog.csdn.net/m0_53547734/article/details/122046962",target:"_blank",rel:"noopener noreferrer"}},[t._v("error in pycallgraph setup command: use_2to3 is invalid._Ce JorDon的博客-CSDN博客"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://cloud.tencent.com/developer/ask/sof/1591374/answer/2169647",target:"_blank",rel:"noopener noreferrer"}},[t._v('用户对问题“如何解决错误:命令"dot -Tpng -failed with error code 256 PyCallGraphException？”的回答 - 问答 - 腾讯云开发者社区-腾讯云 (tencent.com)'),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v('PyCallGraphException: The command "dot" is required to be in your path')]),t._v(" "),s("p",[t._v("这个需要添加环境变量")]),t._v(" "),s("h3",{attrs:{id:"实现代码"}},[t._v("实现代码")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 信号接收函数，每当新建 Image 实例时自动调用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@receiver")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("post_save"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sender"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Img"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create_face_info")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sender"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" created"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("kwargs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" created"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 仅创建的时候执行")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-interpolation"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("f'INFO: **************img instance have been created, saving face info now...'")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# save_LM_faces(instance)  # 保存lightroom 结果")]),t._v("\n        config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 关系图中包括(include)哪些函数名。")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果是某一类的函数，例如类gobang，则可以直接写'gobang.*'，表示以gobang.开头的所有函数。（利用正则表达式）。")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# config.trace_filter = GlobbingFilter(include=[")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     'draw_chessboard',")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     'draw_chessman',")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ])")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 该段作用是关系图中不包括(exclude)哪些函数。(正则表达式规则)")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# config.trace_filter = GlobbingFilter(exclude=[")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     'pycallgraph.*',")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ])")]),t._v("\n        graphviz "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" GraphvizOutput"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        graphviz"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("output_file "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'graph.png'")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" PyCallGraph"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("output"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("graphviz"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" config"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            save_insight_faces"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 保存insightface识别结果")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br")])]),s("h3",{attrs:{id:"效果展示"}},[t._v("效果展示")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://deep-diary.oss-cn-hangzhou.aliyuncs.com/blog/image-20220815222037021.png",alt:"image-20220815222037021"}})]),t._v(" "),s("p",[t._v("从上图函数调用关系中可以看到，这个"),s("code",[t._v("get_people_fts")]),t._v("的确是有问题的，事件太长，后仔细一想是不对：")]),t._v(" "),s("p",[t._v("原来的思路是：")]),t._v(" "),s("p",[t._v("每个人脸对应一个人脸相册，一个中心特征，其中心特征，是融合了所有该人特征的平均值，也就是说，如果这个人的人脸有100张，就需要对这100张人脸特征取平均值，而且每个人脸特征，都保存在文件系统中，因此就特别耗时。")]),t._v(" "),s("p",[t._v("优化后的思路：")]),t._v(" "),s("ul",[s("li",[t._v("人脸数据，人脸特征数据，由数据库进行管理，不再进行按人脸进行划分文件夹")]),t._v(" "),s("li",[t._v("人脸相册保存的，仅仅是某一张人脸的特征，而非一堆人脸的平均特征向量")])]),t._v(" "),s("h2",{attrs:{id:"安装插件"}},[t._v("安装插件")]),t._v(" "),s("h3",{attrs:{id:"chatgpt-plus"}},[t._v("chatgpt plus")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://deep-diary.oss-cn-hangzhou.aliyuncs.com/blog/image-20230618133214617.png",alt:"image-20230618133214617"}})]),t._v(" "),s("p",[t._v("使用")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://deep-diary.oss-cn-hangzhou.aliyuncs.com/blog/image-20230618133723676.png",alt:"image-20230618133723676"}})]),t._v(" "),s("h3",{attrs:{id:"rainbow-brackets插件"}},[t._v("Rainbow Brackets插件")]),t._v(" "),s("p",[t._v("括号颜色显示")]),t._v(" "),s("h3",{attrs:{id:"aixcoder-code-completer"}},[t._v("aiXcoder Code Completer")]),t._v(" "),s("p",[t._v("对整行代码自动补全")]),t._v(" "),s("h3",{attrs:{id:"codeglance"}},[t._v("codeglance")]),t._v(" "),s("p",[t._v("显示代码小地图，便于快速定位")]),t._v(" "),s("h3",{attrs:{id:"ideavim"}},[t._v("ideavim")]),t._v(" "),s("p",[t._v("VIM 插件")]),t._v(" "),s("h3",{attrs:{id:"json-parser"}},[t._v("json parser")]),t._v(" "),s("p",[t._v("json解析")]),t._v(" "),s("h3",{attrs:{id:"csv-plugin"}},[t._v("csv plugin")]),t._v(" "),s("h2",{attrs:{id:"使用copilot"}},[t._v("使用copilot")]),t._v(" "),s("h3",{attrs:{id:"安装"}},[t._v("安装")]),t._v(" "),s("p",[t._v("安装copilot这个插件，点击登入，会弹出设备码，将这个码跟git账户绑定即可")]),t._v(" "),s("p",[t._v("不过使用这个插件需要付费的")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://deep-diary.oss-cn-hangzhou.aliyuncs.com/blog/AI%20%E6%8F%90%E7%A4%BA%E7%9A%84%E4%BB%A3%E7%A0%81.jpg",alt:"AI 提示的代码"}})]),t._v(" "),s("h2",{attrs:{id:"更新记录"}},[t._v("更新记录")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Date")]),t._v(" "),s("th",[t._v("Updated Info")]),t._v(" "),s("th",[t._v("Address")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("2022-08-15")]),t._v(" "),s("td",[t._v("init")]),t._v(" "),s("td",[t._v("@ home")])]),t._v(" "),s("tr",[s("td",[t._v("2023-06-18")]),t._v(" "),s("td",[t._v("更新了如何使用一些插件来提高效率")]),t._v(" "),s("td",[t._v("@ home")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td"),t._v(" "),s("td")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);