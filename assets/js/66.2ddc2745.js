(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{706:function(t,s,a){"use strict";a.r(s);var n=a(5),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("说明")]),t._v(" "),a("p",[t._v("一个 python project 中往往包含很多 .py 文件。python文件中又会包含很多函数，函数之间相互传参和调用。如果遇到代码行数很多的情况，我们阅读起来就会有困难。那么有什么办法可以解决这个困难呢？\n我们可以考虑采取可视化的方法将代码调用关系用图的方法表示出来。 pycallgraph是一种适用于python代码的动态调用分析工具。当然要想实现可视化还需要安装graphviz。graphviz 是一个图形可视化工具，可以将调用关系表示为图的形式。\n————————————————\n版权声明：本文为CSDN博主「臭皮匠-hfW」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/weixin_45080292/article/details/124896885")]),t._v(" "),a("p",[a("a",{attrs:{href:"www.deep-diary.com"}},[t._v("点击免费观看教学视频")])])]),t._v(" "),a("h1",{attrs:{id:"pycharm函数调用关系可视化"}},[t._v("pycharm函数调用关系可视化")]),t._v(" "),a("h2",{attrs:{id:"参考文件"}},[t._v("参考文件")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://blog.csdn.net/weixin_45080292/article/details/124896885",target:"_blank",rel:"noopener noreferrer"}},[t._v("pycharm函数调用关系可视化（Graphviz + pycallgraph画图）_臭皮匠-hfW的博客-CSDN博客_pycharm显示函数调用关系"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/qq_36408085/article/details/82952846",target:"_blank",rel:"noopener noreferrer"}},[t._v("利用graphviz软件和pycallgraph库自动生成Python代码函数调用关系图_神奇小海螺的博客-CSDN博客"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"http://www.graphviz.org/docs/outputs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Output Formats | Graphviz"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"问题清单"}},[t._v("问题清单")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://blog.csdn.net/m0_53547734/article/details/122046962",target:"_blank",rel:"noopener noreferrer"}},[t._v("error in pycallgraph setup command: use_2to3 is invalid._Ce JorDon的博客-CSDN博客"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://cloud.tencent.com/developer/ask/sof/1591374/answer/2169647",target:"_blank",rel:"noopener noreferrer"}},[t._v('用户对问题“如何解决错误:命令"dot -Tpng -failed with error code 256 PyCallGraphException？”的回答 - 问答 - 腾讯云开发者社区-腾讯云 (tencent.com)'),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v('PyCallGraphException: The command "dot" is required to be in your path')]),t._v(" "),a("p",[t._v("这个需要添加环境变量")]),t._v(" "),a("h2",{attrs:{id:"实现代码"}},[t._v("实现代码")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 信号接收函数，每当新建 Image 实例时自动调用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@receiver")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("post_save"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sender"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Img"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create_face_info")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" instance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" created"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("kwargs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" created"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 仅创建的时候执行")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string-interpolation"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("f'INFO: **************img instance have been created, saving face info now...'")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# save_LM_faces(instance)  # 保存lightroom 结果")]),t._v("\n        config "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 关系图中包括(include)哪些函数名。")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果是某一类的函数，例如类gobang，则可以直接写'gobang.*'，表示以gobang.开头的所有函数。（利用正则表达式）。")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# config.trace_filter = GlobbingFilter(include=[")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     'draw_chessboard',")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     'draw_chessman',")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ])")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 该段作用是关系图中不包括(exclude)哪些函数。(正则表达式规则)")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# config.trace_filter = GlobbingFilter(exclude=[")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     'pycallgraph.*',")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ])")]),t._v("\n        graphviz "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" GraphvizOutput"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        graphviz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("output_file "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'graph.png'")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" PyCallGraph"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("output"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("graphviz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" config"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            save_insight_faces"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 保存insightface识别结果")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br")])]),a("h2",{attrs:{id:"效果展示"}},[t._v("效果展示")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://deep-diary.oss-cn-hangzhou.aliyuncs.com/blog/image-20220815222037021.png",alt:"image-20220815222037021"}})]),t._v(" "),a("p",[t._v("从上图函数调用关系中可以看到，这个"),a("code",[t._v("get_people_fts")]),t._v("的确是有问题的，事件太长，后仔细一想是不对：")]),t._v(" "),a("p",[t._v("原来的思路是：")]),t._v(" "),a("p",[t._v("每个人脸对应一个人脸相册，一个中心特征，其中心特征，是融合了所有该人特征的平均值，也就是说，如果这个人的人脸有100张，就需要对这100张人脸特征取平均值，而且每个人脸特征，都保存在文件系统中，因此就特别耗时。")]),t._v(" "),a("p",[t._v("优化后的思路：")]),t._v(" "),a("ul",[a("li",[t._v("人脸数据，人脸特征数据，由数据库进行管理，不再进行按人脸进行划分文件夹")]),t._v(" "),a("li",[t._v("人脸相册保存的，仅仅是某一张人脸的特征，而非一堆人脸的平均特征向量")])])])}),[],!1,null,null,null);s.default=e.exports}}]);